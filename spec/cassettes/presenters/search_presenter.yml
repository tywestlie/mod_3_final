---
http_interactions:
- request:
    method: get
    uri: https://od-api.oxforddictionaries.com/api/v1/entries/en/test/sentences
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.2
      App-Key:
      - 335463c48b94bd550c0894d0151b5bff
      App-Id:
      - 489a3387
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Date:
      - Thu, 26 Jul 2018 22:37:32 GMT
      Server:
      - openresty/1.9.7.4
      Version:
      - v1.10.0-19-g9c8abf9
      Content-Length:
      - '128292'
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
    "metadata": {
        "provider": "Oxford University Press"
    },
    "results": [
        {
            "id": "test",
            "language": "en",
            "lexicalEntries": [
                {
                    "language": "en",
                    "lexicalCategory": "Noun",
                    "sentences": [
                        {
                            "regions": [
                                "Indian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "The final 26 were interviewed and ranked based on their combined performance in the test and interview."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "Inclusion variables were declared for exposure measures to explore predictors of positive skin prick tests."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "Although crowds for Tests in England remain excellent, elsewhere it is a different story."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "If tests are positive, this will be only the second recorded case of human foot and mouth disease in Britain."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Some of these tests involve knowledge picked up from education, and some don't."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Valued added is the complex score the Department for Education and Skills uses to work out if pupils are reaching their full potential, based on performances in earlier tests."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "Anticoagulation therapy was withheld unless the ultrasound test was positive."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "One month later, Fred Hargreave and Jack demonstrated positive inhalation tests in three of these workers."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "But it's up to states to establish their own tests and standards."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "If the HPV test is positive for the high risk type, then the patient warrants a closer look."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "So we did and when we got there were told that we would be there all morning, doing blood tests, pregnancy tests, examinations and an ultrasound scan."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "On the other hand, there may be potential adverse psychological effects from a positive test."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "All patients were atopic, as defined by two or more positive skin prick tests to common allergens."
                        },
                        {
                            "regions": [
                                "Australian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "We've said in the pilot that if you have a positive test, colonoscopy must be made available within four weeks."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "The thyroid gland itself may be checked using a test called scintigraphy."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Judging applicants must pass a written test, demonstrating their knowledge of these rules."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "Most advanced medical tests assess electrical impulses in the brain and elsewhere in the body to find areas of activity or lack of it that may be causing a problem."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "Finally, we have omitted performance tests for the time being."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "This test is often positive in forms of blood vessel inflammation such as vasculitis."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "Indeed, many of the assemblies have already passed reliability and quality tests needed to achieve FDA approval."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "The contracts were signed by the players on the opening day of the first Test against West Indies."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "Thus a potentially useful bargain spawned a serious crisis and test of strength and will between opposed alliance systems."
                        },
                        {
                            "regions": [
                                "Indian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "The overall dimensions, damping system, bread carriage and marking fall under the tests for performance."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "Women who have a positive test result for the human papilloma virus are also at increased risk of cervical cancer."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "Overall, he believes the game will be a test for their reserve strength."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "The Test also marks the return of Brian Lara, who was rested for the one-day series."
                        },
                        {
                            "regions": [
                                "New Zealand"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "Marriages go through difficulties, friendships go through tests, and events can occur that are unexpected and grievous."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "Electrodiagnostic tests may be positive, but false-negative test results are common."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Students in the seventeen districts gradually improved their performance on standardized tests."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "Well, we'll have some performance tests shortly, but we want to note another stipulation made in the documentation on the modules."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Written tests can assess knowledge acquisition and reasoning ability, but they cannot so easily measure skills"
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "They also gave each child a full eye examination using established diagnostic examination procedures and tests."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "At the end of last summer he called for fewer Tests to make way for more one-day games to give the players decent breaks."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "As one measure to do this, quality control tests should be performed to determine the degree of variability for each test."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "And events like shot-putting and weight-lifting are tests of brute strength."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "Potential harms from screening include the consequences of false positive tests, but evidence regarding these is lacking."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Child psychologists are being brought into a borough's schools in a bid to pull up performance in key tests and exams."
                        },
                        {
                            "domains": [
                                "Chemistry"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.012"
                            ],
                            "text": "One test for the presence of silver ions in solution is to add chloride ions to the solution."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Validity standards are based on test content, not on which groups of students take the test."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "In fact, he usually finished last in training camp endurance and strength tests."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "Use of radiation for medical examinations and tests is the largest manmade source of radiation exposure."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "Since the beast was invincible by arrow or club the contest was a test of physical strength and endurance."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Pressure to show big improvements on test scores forces teachers to spend weeks, and even months, drilling students on the tests."
                        },
                        {
                            "domains": [
                                "Metallurgy"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.021"
                            ],
                            "text": "When fully prepared, the test is allowed to dry, and is then placed in a furnace, constructed in all respects like a common reverberator)' furnace, except that a space is left open in the bed of it to receive the test, and that the width of the arch is much reduced."
                        },
                        {
                            "domains": [
                                "Zoology"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042290.005"
                            ],
                            "text": "From such studies as those of Be and Spero and Wilde, we know that foraminifera sometimes regenerate their tests after injury."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "Subsequent tests revealed the ‘existence of cancerous tissue’ prompting specialists to recommend him for chemotherapy."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "This approach to correct the continuum theories is being pursued elsewhere, but no explicit tests of its performance have been published."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "It is, unquestionably the greatest test of mental strength this present side has ever faced."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "It is his obligation to have the performance tests carried out."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "Sirius has launched all three of its satellites, but is still conducting on-ground performance tests."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "New genetic tests would identify the exact risk of an individual developing heart disease or Parkinson's as he or she aged."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "Those qualifications are best measured by performance tests."
                        },
                        {
                            "domains": [
                                "Chemistry"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.012"
                            ],
                            "text": "To identify the presence of a ketone functional group several tests must be carried out."
                        },
                        {
                            "domains": [
                                "Metallurgy"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.021"
                            ],
                            "text": "When introducing a fresh cupel or test, the fire must be low and heat must be applied with great caution, or otherwise the bone ash will split to pieces; and for the same reason the bone ash must be dried very gently."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "Maybe, but knowing, and knowing when to know is the true test of knowledge."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "We tried to regroup for the next two Tests, but both those matches were severely affected by rain."
                        },
                        {
                            "regions": [
                                "Canadian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "I answered the question, took a seat, wrote the test, handed it in and left."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "A grafting right-handed batsman, he made two of his three centuries in his first seven Tests."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "After an ultrasound test and a physical examination, ovarian cancer was diagnosed."
                        },
                        {
                            "regions": [
                                "Canadian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Do you want to compare answers with your buddies during the break and then start writing the test?"
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "We may have run the world champions close in all three Tests but that is little consolation right at this moment."
                        },
                        {
                            "regions": [
                                "Indian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "It will be a test of their strength, their mental toughness and their attitude."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "An array validation program represents the foundation of tests required to establish robust assay performance in a multiplexed environment."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "If required, changes would be made in the team for the two Tests to be played at Barbados and Jamaica."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "I paid close attention to everything he said, but still came up short on tests and quizzes."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "The results of the studies that measured reliability indicate that the test can be reliable if a standard procedure is used."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "Although the tumour cannot be completely eradicated, Maxwell's surgeon has told her that tests have revealed it to be relatively benign, and her prognosis is good."
                        },
                        {
                            "domains": [
                                "Chemistry"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.012"
                            ],
                            "text": "The new test can identify the presence of anthrax in less than one hour instead of days."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "The last two Tests of the most recent Ashes series showed why the one-day game can never be Test cricket."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "We asked the parliamentary candidates for Wimbledon to tell us a bit about themselves and then we subjected them to a test of their knowledge of their area."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "The preliminary tests indicated that the performance of epoxy asphalt was far superior to that of other systems."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "The man was the Kent swing bowler Richard Ellison, brought in for his first Test of the summer."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "When her chemotherapy finished in March 2003 she hoped to regain a normal life but she and her family were devastated when tests revealed she had relapsed."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "An irresistible force when the mood takes him, he was irrepressible in the two Tests he played."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "The actual probability depends not only on the reliability of the test, but also the number of infections in the population to begin with."
                        },
                        {
                            "regions": [
                                "Australian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "In short, numerous tests have proven that the enormous mass of these vehicles makes them more dangerous in a crash than smaller cars."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Teachers can use the tests to highlight the strengths and weaknesses of pupils so they can identify areas to concentrate on."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "They had had the element of surprise during the first attack, but now it was to be a real test of strength."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "In eight cases, the skin prick tests were positive, although only one serological test was in agreement with the skin test."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "The Dakar Rally is a serious test of endurance and adaptability."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "Diagnostic tests may include renal ultrasonography or an abbreviated intravenous pyelogram."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "For the Canton government, the situation was a test of both its sincerity and its strength."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "Adrian had endured the ultimate test of strength in a man, and here he was, alive and telling it all."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "Hamilton and Wellington will each stage two Tests while Auckland will host the remaining match."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "A woman has received treatment after being bitten by a bat that initial tests show has a strain of rabies which, in rare cases, can affect humans."
                        },
                        {
                            "domains": [
                                "Chemistry"
                            ],
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.012"
                            ],
                            "text": "Emergency tests revealed traces of barbiturates, normally prescribed to aid sleep or calm anxiety."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "Your doctor may recommend X-rays along with these and other medical tests to make or confirm a diagnosis."
                        },
                        {
                            "domains": [
                                "Zoology"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042290.005"
                            ],
                            "text": "Although phylogenetic tests in ostracods are relatively clear, morphological evidence is somewhat ambiguous."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "The rates of positive skin prick tests were similar at age 10 but higher in the index group at age 6."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "It was called Man Vs Beast, and involved humans taking part in tests of speed, strength and endurance against animals."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "This was his second century in two Tests, and the team needs this kind of consistency and responsibility."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "We want you to enjoy our food at its very best and we carry out extensive tests to establish the natural life of each of our products."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "Can you give some more details of the innings when Don Bradman made 300 in a day in a Test?"
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "The test is positive if both samples grow bacteria and if the catheter sample grows at least three times as many bacteria as the peripheral blood sample."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "The evaluation included a physical examination, laboratory tests, and an electrocardiogram."
                        },
                        {
                            "domains": [
                                "Chemistry"
                            ],
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.012"
                            ],
                            "text": "Histochemical tests did not reveal the presence of sugars within the pseudopollen."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "This positive assessment must, however, be tempered by the acknowledgement that the tests establish bare minimum standards."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.014"
                            ],
                            "text": "Research is needed to establish whether computerised tests of vigilance are useful predictors of safety at the wheel in people with narcolepsy."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "Australia won the first and last Tests at a canter, but had no answer to Lara's genius in the middle two."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "Doctors carried out a series of other tests to establish the cause of her illness."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "Results of kidney and liver function tests were within normal limits."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Perhaps the most contentious issue in this debate is the use of standardized tests to measure school performance."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "On test there was certainly very little buffeting or wind noise."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "Davis' long arms were supposed to put him at a disadvantage in such tests of strength, which makes his total even more impressive."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "He began strength training last week but will not be allowed to play catch until he passes resistance-based strength tests from the team doctor."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "By the time the Tests began, the boy, with all of two previous matches under his belt, already had the feel of a pro."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "If only one of the three clinical tests is positive, imaging is indicated."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "Others are demanding the introduction of a national prostate cancer screening programme, despite concerns about the reliability of current tests."
                        },
                        {
                            "domains": [
                                "Zoology"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042290.005"
                            ],
                            "text": "The tests of the shells are recrystallized, but the original ornamentation is preserved in very good detail."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "You were told what to learn and expected to repeat your knowledge in tests."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "The authors discuss clinical presentation of disease and diagnostic tests used to identify them."
                        },
                        {
                            "domains": [
                                "Metallurgy"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.021"
                            ],
                            "text": "The test, when placed in position, forms the bed of the furnace, with the long diameter transversely."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "The initial investigations are a sensitive pregnancy test and ultrasonography."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "This young lad, since passing his test, has written off two cars in self inflicted accidents."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "The alloy was then heated and rolled into half-inch-thick sheets, and subjected to strength and ductility tests."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "Matthew Hayden scored a century in his first Test against three different opponents."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "To avoid mistakes they have to devise tests of reliability."
                        },
                        {
                            "regions": [
                                "East Asian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Written tests and performance in one's courses are no longer the only route to higher education or the only index by which students are evaluated."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "The system's performance in cyclic tests at the University of California, Berkeley, was also astonishing."
                        },
                        {
                            "regions": [
                                "unknown"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "The boy seeks out the spirit and asks it how he can become a real bear, to which the spirit replies that he must pass three tests of great strength, endurance and solitude."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "Under his guidance, South Africa have won four Tests, lost three and drawn four."
                        },
                        {
                            "domains": [
                                "Zoology"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042290.005"
                            ],
                            "text": "Despite the astonishing abundance of echinoid spines in the coral reef horizon, echinoid tests were not found here."
                        },
                        {
                            "regions": [
                                "Indian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.009",
                                "b-en-es0049465.003"
                            ],
                            "text": "Often the question about study in America centres around the performance in these tests."
                        },
                        {
                            "regions": [
                                "Indian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "The cola giant, Thums Up, is challenging youth all over the country to undertake gruelling tests of strength and stamina."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.014"
                            ],
                            "text": "They found that in control subjects, larger caudate nucleus areas were associated with a worse performance on tests of attention."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "There are four Tests to go, that is a lot of cricket to be played over the next six weeks."
                        },
                        {
                            "regions": [
                                "Canadian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "We used to hold specific strength tests for as long as possible - the last one standing was the winner."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.016"
                            ],
                            "text": "Gower thought the balance of England's attack, in the last couple of Tests, had been a great asset."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "At 3 months we repeated physiotherapy and occupational therapy assessments and cardiovascular tests if they were abnormal."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.013"
                            ],
                            "text": "I have seen positive tests in either leg in regional enteritis, and in the left leg in colonic diverticulitis."
                        },
                        {
                            "regions": [
                                "Indian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "Echocardiographic examination and laboratory tests were performed on these children."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.006",
                                "b-en-es0049465.004"
                            ],
                            "text": "All their Mercedes Benz engine parts have passed rigid quality tests for durability and performance as well as all the other car parts."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.011"
                            ],
                            "text": "Patients with active HBV infection require liver function tests and further medical evaluation."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.010"
                            ],
                            "text": "It was an unequalled test of courage, strength and endurance, technique being less important than character."
                        }
                    ],
                    "text": "test"
                },
                {
                    "language": "en",
                    "lexicalCategory": "Verb",
                    "sentences": [
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "Their blood serum was tested for traces of antibodies against the influenza virus."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.031",
                                "b-en-es0049465.012"
                            ],
                            "text": "No NFL player's courage is tested more severely than the receiver who willingly patrols the middle of the field."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "It was meant to be a crucial exam to test the basic skills of ambulance workers who wanted to step up the career ladder and become paramedics."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "In mist or under a covering of snow, however, navigational skills will be tested."
                        },
                        {
                            "domains": [
                                "Chemistry"
                            ],
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.034"
                            ],
                            "text": "Among the gaseous emissions, samples we tested for included hydrogen chloride, hydrogen cyanide, hydrogen fluoride, isocyanides, and styrene."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "They created their machine, which didn't have a name, and proceeded testing it with remote probes."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "Six of his patients tested positive for the virus."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "They'll be testing your putting skills in 160 venues, with 10 lucky semi finalists going forward to the final in June to play a shot for"
                        },
                        {
                            "regions": [
                                "Indian"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "Pre-cast concrete slabs are being assembled to build the compound wall; all material are tested at a quality lab at the airport site."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "b-en-es0049465.012",
                                "m_en_gbus1042280.031"
                            ],
                            "text": "The seaworthiness of the vessel was severely tested on the Atlantic crossing from Newfoundland but she came through without damage or loss."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.035"
                            ],
                            "text": "The best way to test a chilli for strength is to munch a bit before cooking."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "Our classes are more rigorous than advanced placement and we are tested by international standards."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "Blood is also tested for anaemia, iron and vitamin deficiency and liver problems."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "If students learn something a week before finals then what they are being tested on is their short term memory version of their knowledge of the material."
                        },
                        {
                            "regions": [
                                "Canadian"
                            ],
                            "senseIds": [
                                "b-en-es0049465.012",
                                "m_en_gbus1042280.031"
                            ],
                            "text": "But spending so much time on the water tested everyone's physical limits."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.035"
                            ],
                            "text": "Using the same pan, fry a small patty of the meat mixture and taste to test the seasoning."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "The blood and urine will be tested for substances such as blood sugar, calcium, and potassium."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "b-en-es0049465.012",
                                "m_en_gbus1042280.031"
                            ],
                            "text": "Although tied to the same markets and products, their ability to cooperate was severely tested by crises that revealed different interests."
                        },
                        {
                            "regions": [
                                "East Asian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "During the six-hour surprise road check, more than 100 drivers of cars, trucks and busses tested positive for illegal drugs."
                        },
                        {
                            "regions": [
                                "New Zealand"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "Duh, that's why they are testing you in the final weeks of the school."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "After the birth of a child with congenital malformations, one way of looking for the cause is by testing the father's body fluids for organic solvents."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "All mothers had been tested for HIV antibodies and were HIV seronegative."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "Before pregnancy, a woman should be tested for rubella and vaccinated if needed."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "Four teachers tested positive for tuberculosis at the end of the first week of April; tuberculosis had been diagnosed in 19 pupils and teachers earlier in the week."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "She also is subject to further action for four other horses in her care that tested positive for the drug at Rockingham Park earlier in the year."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "I got 92% in the numerical tests, but that skill won't be tested."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "Members of the Defence Forces are not tested for alcohol but officers keep an eye out for drink abuse and a soldier could be thrown out of the Forces if the problem persists."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "Arrestees who tested positive for at least one drug were significantly more likely to have had a prior arrest as compared to arrestees who did not test positive for drugs."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "I think students are working a great deal harder and I think exam papers are testing different skills."
                        },
                        {
                            "regions": [
                                "East Asian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "Although investigators say drug tests show that some of the witnesses in the case had tested positive for drug use, they refused to say who."
                        },
                        {
                            "domains": [
                                "Chemistry"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.034"
                            ],
                            "text": "To avoid these troubles, the substrate must be tested for alkalinity, water vapor and moisture emission."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "If you or the baby's father has a family history of cystic fibrosis or congenital hearing loss, you might be tested to see if you carry one of these traits."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.031",
                                "b-en-es0049465.012"
                            ],
                            "text": "Her inner strength was tested early in her marriage when tragedy struck."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "I went to get my eyes examined, and they tested me for colorblindness."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "Nor is he merely sight-reading based on familiarity, as he was tested by writing down some simple phrases which he could not have known in advance."
                        },
                        {
                            "regions": [
                                "Canadian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.031",
                                "b-en-es0049465.012"
                            ],
                            "text": "And it is the daunting measuring stick to test a rower's physical capabilities."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "We replaced the detailed oral counselling before testing with a shorter, written explanation of the salient points."
                        },
                        {
                            "regions": [
                                "East Asian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "He admitted he had tested positive for drugs arising out of the medication he's been taking for his dislocated shoulder."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "All cancer relatives who tested positive for H. pylori infection were treated with eradication therapy."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "The exam tested the basic knowledge and skills students acquired by the end of a two-year professional nursing program."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "At least 14 other drugs have been tested in controlled clinical trials and found to be ineffective."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "A small sample of blood must be tested by a doctor."
                        },
                        {
                            "regions": [
                                "East Asian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "Although a limited number of teachers were tested, the score revealed the level of their English capabilities."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "Fetal cells contained in the amniotic fluid will be tested for Down syndrome and other chromosomal abnormalities."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.012",
                                "m_en_gbus1042280.031"
                            ],
                            "text": "This severely tested their friendship, before being resolved - with an offer of Polaris - in a way unlikely between two men less close."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.035"
                            ],
                            "text": "Quite naturally, Harris is always testing and tasting recipes."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "One quarter of all male drivers under the age of 25 years tested positive for drugs, with being cannabis the most common drug."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "The accuracy of electronic voting can be tested by comparing paper records to digital votes but not to recount an entire election."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.031",
                                "b-en-es0049465.012"
                            ],
                            "text": "The character of the team was severely tested and they came through with honours."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "We also thank Harparkash Kaur for testing the contents and quality of the study drugs."
                        },
                        {
                            "regions": [
                                "East Asian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "She tests us on her weekly columns, gives sudden projects and papers and orals due the next day, and asks impossible things."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "The studies in question took samples of women who tested positive for either of these mutations."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "Clients who tested positive or equivocal had a high degree of compliance regarding treatment."
                        },
                        {
                            "regions": [
                                "Indian"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "The aim during the practice match, besides testing the combinations, was quick distribution of passes in match-like situation and fast taking of set pieces."
                        },
                        {
                            "regions": [
                                "South African"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "Forty people who are thought to have come into contact with the substance have been tested and all results have been negative, Selebi said in a statement."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.035"
                            ],
                            "text": "Because she had many remedies in court, all these remedies were checked and then tested and tasted by her physicians before she consumed them."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "Her CV secured her an invite to an audition which would test her flexibility, strength, floor work and aerial skills."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "The students were tested on their knowledge of forms, sets and self defence techniques."
                        },
                        {
                            "regions": [
                                "East Asian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "The operation began on Friday night after two samples of geese imported from China tested positive for the bird-flu virus."
                        },
                        {
                            "regions": [
                                "East Asian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "He is also a convicted felon who tested positive for drugs in 2003 and was fired from a job earlier this year for allegedly threatening a co-worker's son with a gun."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "Athletes at the Sydney Olympics will be tested for abuse of marijuana."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.035"
                            ],
                            "text": "He bit his food and chewed, testing the texture and taste."
                        },
                        {
                            "regions": [
                                "Canadian"
                            ],
                            "senseIds": [
                                "b-en-es0049465.012",
                                "m_en_gbus1042280.031"
                            ],
                            "text": "He was currently testing them and their strength, they would need to be strong to take on any of the Dream Weaver's guardians, and he had seen their power."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.031",
                                "b-en-es0049465.012"
                            ],
                            "text": "He was, again as mentioned yesterday, a member of the Arts Club, though his drinking and other habits severely tested the patience of the members."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "Mr Littleboy said his water supply was regularly tested and the most recent screening in the spring had shown no pollution."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "But the original building was opened in 1867 by Bradford Corporation to test the weight and quality of wool."
                        },
                        {
                            "regions": [
                                "New Zealand"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "Students are now tested on their verbal, mathematical and written composition instead of just verbal and mathematical."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "The source individual's blood must be tested for hepatitis B virus and HIV as soon as feasible."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "These varieties have been tested in gardens in all climates and have been judged to be good performers in all parts of the country."
                        },
                        {
                            "regions": [
                                "Australian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "And it extends to independent thinking, which can't easily be tested by exams."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "So, he was testing me to see if I ever really learned how to - if I had ever even tried to learn how to use it, I think."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.035"
                            ],
                            "text": "To test for overheating, touch your bare wrist to the barrel, near its end."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "Students were tested on measures of reading skill at the end of each year of intervention, and again 1 year after the intervention concluded."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.012",
                                "m_en_gbus1042280.031"
                            ],
                            "text": "The match was played in a wonderful spirit, as befits two friends, although the patience of both players was severely tested by some erratic umpiring."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "No one disputes that pupils need to be tested in exams, but they must have both the time to develop in other areas and, just as importantly, be encouraged to use that time profitably."
                        },
                        {
                            "domains": [
                                "Chemistry"
                            ],
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.034"
                            ],
                            "text": "The quality of lipids was tested by thin layer chromatography."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "Almost one half of U.S. women under age 45 have been tested for human immunodeficiency virus."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "This substance has never been tested on humans for safety nor has it been licensed for use as a medicine."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "The substances will be tested over the next seven years by independent scientists working for the new European Food Safety Authority."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "The competition tested the knowledge and expertise of 30 of Ireland's most imaginative bartenders."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.012",
                                "m_en_gbus1042280.031"
                            ],
                            "text": "The newly formed friendship is severely tested and I won't give the ending away, but it is indeed an astonishing twist of fate for all three men."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "b-en-es0049465.012",
                                "m_en_gbus1042280.031"
                            ],
                            "text": "Their defence was severely tested at times and they have goalkeeper Jonathan Stack to thank for keeping the score somewhat respectable."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "The contestants took a multiple-choice exam testing their knowledge of the subject."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "But his hopes of reaching the top in the game came shuddering to a halt when he tested positive for drugs and was banned from football for six months."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "I happened to have been in New York at the NBC studios a week before, and I was tested Friday, got the test back yesterday."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.031",
                                "b-en-es0049465.012"
                            ],
                            "text": "You should inquire about testing her for her strengths."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "The Bishop came to test us on our knowledge and woe betide the boy who failed to give an instant answer to his theological queries."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "The good Dr. Gupta tests his own driving skills and physical endurance on the racetrack."
                        },
                        {
                            "domains": [
                                "Chemistry"
                            ],
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.034"
                            ],
                            "text": "The cells were also tested with nitrogen dioxide, a by-product of gas cooking, which may reach levels of 1000 parts per billion or more in kitchens."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "The coming years are going to be difficult, and everyone will have to assess their own business, to test its viability before proceeding."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.035"
                            ],
                            "text": "Some little while after Dolly had tested the ground he came suddenly to realise that the door was open and freedom was only a short step away."
                        },
                        {
                            "regions": [
                                "Canadian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.031",
                                "b-en-es0049465.012"
                            ],
                            "text": "So begins a harrowing adventure that tests the young girl's mettle, revealing hidden strengths she didn't know she had."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "Before a transfusion, the donated blood is tested for infectious diseases such as AIDS and hepatitis."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.035"
                            ],
                            "text": "As he leaned ahead and tested the temperature of the air-stream with his hand, he froze."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "Figures provided by the Medical Bureau of Road Safety show that 48 drivers tested positive for the drug last year."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "This led to two utterly unpredictable scenarios: Johnny never tested positive for drugs again, and he boxed better than ever."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "I explained that there had been no cases of human anthrax in south Texas and nothing we had sent to Houston had tested positive for anthrax."
                        },
                        {
                            "regions": [
                                "Indian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.035"
                            ],
                            "text": "The contest is arranged in collaboration with the Institute of Hotel Management and the dishes would be tested for authentic French taste."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "I now know to read my lecture notes soon after writing them, again a few days later then yet again before I am tested on this knowledge."
                        },
                        {
                            "regions": [
                                "Indian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "Various skills of the student are tested in an entrance examination."
                        },
                        {
                            "regions": [
                                "Indian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "All three patients of laryngeal papilloma who tested positive for HPV are symptomatic after year follow up."
                        },
                        {
                            "regions": [
                                "New Zealand"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "Since 1964, every baby born in Taranaki Base Hospital's maternity unit has been tested by an orthopaedic surgeon."
                        },
                        {
                            "regions": [
                                "Australian"
                            ],
                            "senseIds": [
                                "b-en-es0049465.012",
                                "m_en_gbus1042280.031"
                            ],
                            "text": "I grabbed it, presuming he was testing it for strength."
                        },
                        {
                            "regions": [
                                "Irish"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "Your worth as a person is not tested by an examination."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.031",
                                "b-en-es0049465.012"
                            ],
                            "text": "It's a safe bet that any lingering Lord of the Rings fans will find their patience severely tested by Emile."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "Skin tests aren't always accurate when it comes to drug allergies, and you can't be tested for all drugs this way."
                        },
                        {
                            "regions": [
                                "East Asian"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "The agency has also announced sweeping measures to tag and test US cattle and other steps to boost confidence."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "Game booths tested skeptical skills and knowledge."
                        },
                        {
                            "domains": [
                                "Chemistry"
                            ],
                            "regions": [
                                "New Zealand"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.034"
                            ],
                            "text": "But CAA spokesman Bill Sommer said until a sample of the green and brown substance had been tested it was impossible to tell if it was from an aircraft or some other source."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "For most of the drugs, only about half the people who tested positive admitted using drugs."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.033"
                            ],
                            "text": "All 10 of the gastric specimens tested positive for pepsin, and all 10 of the tracheal specimens were negative."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "I think the quality of security products should be tested just as the quality of automobiles is tested."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "Cosmetics are tested on animals to check if a product such as shampoo may work on a human with no harmful effects."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "At the ages of 11 and 14, children are tested in reading and writing and maths - including mental arithmetic - plus science."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "The rifle would be tested for accuracy at 50 yards by firing five, five-shot groups from the bench."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.012",
                                "m_en_gbus1042280.031"
                            ],
                            "text": "The year ahead will test our political establishment to the limit."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "Excavations of the ditch have recovered antlers that were left behind and after their age was tested it was revealed that the first henge was built over 50 centuries ago."
                        },
                        {
                            "regions": [
                                "Australian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "It involves a series of activities designed to test the knowledge and skills of the recruits."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "An earlier agricultural contest, the ploughing match, tested both the ploughman's skill and the plough's efficiency."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "After the tests, the students were given an assessment of their accuracy, complete with corrections, before being tested again at a later date."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "Firstly the exam is to test the teacher's ability not the students."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "Start testing yourself with old exam papers as you go along."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "At half-time in the match, drug collection officers representing Uefa drew names out of a hat to determine which two players from each side would be tested for banned substances."
                        },
                        {
                            "regions": [
                                "Australian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "This week's What's Your Decision will really test you and show you just how hard umpiring can be."
                        },
                        {
                            "regions": [
                                "East Asian"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.032",
                                "b-en-es0049465.016"
                            ],
                            "text": "At the end of the seminar, 51 officers submitted urine samples to be tested for drugs."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "Accuracy should be tested in people who are closer to this threshold because they are the type of patient for whom the clinical decision about drug treatment is to be made in practice."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "Once the system was up and running, it was tested for optimum performance and then used as prototype for the rest of the installations."
                        },
                        {
                            "regions": [
                                "Canadian"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "Neither the questionnaire nor the quiz were tested for validity or reliability."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "On subject with that, I was helping Natalie study for her history finals on Friday, testing her on world leaders."
                        },
                        {
                            "regions": [
                                "North American"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.035"
                            ],
                            "text": "To test for taste, make a small patty of the meat mixture and sauté until cooked."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.030"
                            ],
                            "text": "Geoff Parks, head of admissions at Cambridge University, warned A-level exams were testing the wrong skills."
                        },
                        {
                            "regions": [
                                "unknown"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.031",
                                "b-en-es0049465.012"
                            ],
                            "text": "It pointed out that a number of small fires at the centre had ‘severely tested the fire response capability’ there."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "b-en-es0049465.011",
                                "m_en_gbus1042280.023"
                            ],
                            "text": "Their work aims to provide valid exposure data and to develop reliable methods to test different types of mobile phones."
                        },
                        {
                            "regions": [
                                "Australian"
                            ],
                            "senseIds": [
                                "b-en-es0049465.012",
                                "m_en_gbus1042280.031"
                            ],
                            "text": "Nöel-Picq clearly gets a kick out of pushing his story to the limits of what is socially acceptable, testing his audience, daring them to be offended."
                        },
                        {
                            "regions": [
                                "British"
                            ],
                            "senseIds": [
                                "m_en_gbus1042280.029"
                            ],
                            "text": "At times, even when he was offering the audience the hope of real power, he sounded as if he was working his way through the coal-mining regions of Belgium and would be testing us on them later."
                        }
                    ],
                    "text": "test"
                }
            ],
            "type": "headword",
            "word": "test"
        }
    ]
}
    http_version: 
  recorded_at: Thu, 26 Jul 2018 22:37:32 GMT
recorded_with: VCR 4.0.0
